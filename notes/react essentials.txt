
📌useState in React 
   useState is a React Hook that lets you add state (data that can change) to functional components.
🔧Syntax:
const [state, setState] = useState(initialValue);

state: current value
setState: function to update the value✅
initialValue: starting value (e.g., 0, "", [], null, etc.)

📌 Why Are Components Useful?
- Reusability: You can create a button once and use it everywhere without writing the same code again.
- Easy to Understand: If your code is divided into small pieces (components), it’s much easier to understand and work with.
- Easy to Update: If you want to change the header design, you only change it in one place, and it updates everywhere.
- Organized Code: Your code is cleaner and more organized. Each component does only one thing.
- Better Performance: Only the components that need to update will change, not the whole page.

📌 Understanding Files
🔹index.html is responsible for diplaying content, and it contains index.jsx file
🔹 index.jsx file importing App.jsx file , and index.jsx file used App as JXS code (<App/>)
   and this index.jsx file act as main entry point of our App
   and createRoot and render method are responsible for rendring a single root component
🔹 App.jsx file contains all contents of our website

📌Component Function -> must starts with uppercase Character and shoud have return statement

📌How React handles components ?
- if we inspect our web we see index.html file,having script tag which have index.jsx that transformed into code that run in browser  
- (see index.jsx) 
- the App Component may contain many nested component as needed (App -> 1. Header 2. SideBar 3. Product 4. Footer)
   and are analyzed by React, and React combines all JSX code to generate overall DOM
- these custom components are not showing in actual rendered DOM , there are default html elements like (<header></header>)

📌Component -> A component is like a building block for web pages. You make it once and use it anywhere you want. 
              It makes development faster and more organized. 
These are 2 types 1.Build-in Components  2. Custom Components
1.Build-in Components -> lower case like div , img 
2. Custom Components -> UpperCase like App, Header, SideBar

📌Using-Outputting-Dynamic-Values

import reactImg from './assets/react-core-concepts.png';     //🔹 dynamic image

const reactDescriptions = ['Fundamental', 'Crucial', 'Core'];

function genRandomInt(max) {
  return Math.floor(Math.random() * (max + 1));
}

function Header() {
  const description = reactDescriptions[genRandomInt(2)];     //🔹 dynamic contents

  return (
    <header>
      <img src={reactImg} alt="Stylized atom" />
      <h1>React Essentials</h1>
      <p>
        {description} React concepts you will need for almost any app you are
        going to build!
      </p>
    </header>
  );
}

function App() {
  return (
    <div>
      <Header />
      <main>
        <h2>Time to get started!</h2>
      </main>
    </div>
  );
}

export default App;


📌importing in curly braces {}    vs    normal import

1. if export default like this       export default function Header() {}
   we import without curly braces    import Header from './components/Header.jsx';

2. if it is named export like this for array of objects    export const CORE_CONCEPTS = [];
     we import with curly braces                           import { CORE_CONCEPTS } from './data.js';

📌Props :
- Props (short for "properties") are a way to pass data from one component to another, 
- typically from a parent component to a child component. 
- They are read-only and cannot be modified by the child component.
- here in below codes we have (image, title, description) as prop

🔹 Different syntax of props:

// function CoreConcept(props){
//   return(<li>
//     <img src={props.image} alt="props.title"/>
//     <h3>{props.title} </h3>
//     <p> {props.description}</p>
//   </li>
//   );
// }

//          ---------- or more short using obj destructuring ----------------

🔹
//export default function CoreConcept({ image, title, description }) {
  return(<li>
    <img src={image} alt="..."/>
    <h3>{title} </h3>
    <p> {description}</p>
  </li>
  );
}


- In parent App component

 <section id="core-concepts">
          <h2>Core Concepts</h2>
          <ul>
            <CoreConcept
              title="Components"
              description="The core UI building block."
              image={componentsImg}
            />
            <CoreConcept title="Props" />   //same for all
            <CoreConcept />
            <CoreConcept />
          </ul>
        </section>

---------------- we move the blue data in data.js and write like this below in app component---------------------------------------------

<CoreConcept title={CORE_CONCEPTS[0].title} 
             description={CORE_CONCEPTS[0].description} 
			 image={CORE_CONCEPTS[0].image} />
<CoreConcept title={CORE_CONCEPTS[1].title} 
             description={CORE_CONCEPTS[1].description} 
			 image={CORE_CONCEPTS[1].image} />
			 .
			 .
       -------  or we can write above-----
<CoreConcept {...CORE_CONCEPTS[2]} />         // here we use spread operator to pull out all key value pairs of data.js as props
<CoreConcept {...CORE_CONCEPTS[3]} />   

📌 More Prop Syntaxes

🔹 export default function CoreConcept({ concept }){
  return(
  <li>
    <img src={concept.image} alt={concept.title}/>
    <h3>{concept.title} </h3>
    <p> {concept.description}</p>
  </li>
  );
}

------------or we can write above code like this --------------------

🔹 export default function CoreConcept({ concept }) {
  const { title, description, image } = concept;
    return (
   <li>
      <img src={image} alt={title} />
      <h3>{title}</h3>
      <p>{description}</p>
      
     </li>
  );
}
- In parent component
 <CoreConcept concept={CORE_CONCEPTS[0]} />
 <CoreConcept concept={CORE_CONCEPTS[1]} />
 <CoreConcept concept={CORE_CONCEPTS[2]} />
 <CoreConcept concept={CORE_CONCEPTS[3]} />
 
📌 "children" prop vs "attribute props"
 <TabButton>Components</TabButton
 
 function TabButton({children}){
   return <button>{children}</button>;
 }
 
 or attribute prop
 
 <TabButton label="Component"></TabButton>
 
 function TabButton({label}){
   return <button>{label}</button>;
 }    
 
🔹 -----More Example of Children prop----------------
 
import Card from './Card';

function App() {
  return (
    <div id="app">
      <h1>Available Experts</h1>
      <Card name="Anthony Blake">
        <p>
          Blake is a professor of Computer Science at the University of
          Illinois.
        </p>
        <p>
          <a href="mailto:blake@example.com">Email Anthony</a>
        </p>
      </Card>

      <Card name="Maria Miles">
        <p>
          Maria is a professor of Computer Science at the University of
          Illinois.
        </p>
        <p>
          <a href="mailto:blake@example.com">Email Maria</a>
        </p>
      </Card>
    </div>
  );
}

export default App;

  
  card.js 
  export default function Card({name,children}){
    return(
        <article className="card">
        <h2>{name}</h2>
        {children}
        </article>
        );
}

-----------------------------------------------------------Section 4 Deep Dive---------------------------------------

📌   🧩React Fragments – In React, a Fragment lets you return multiple elements from a component without adding extra DOM nodes (like a <div>).
📝 When to use Fragments:
- To avoid extra wrapper <div>s.
- When returning elements from .map() inside a list.
- To preserve valid HTML structure (e.g., inside <table> where only <tr> or <td> is allowed).
- example 
import React from 'react';

function Example() {
  return (
    <React.Fragment>
      <h1>Hello</h1>
      <p>This is a message</p>
    </React.Fragment>
  );
}
-----or-----
function Example() {
  return (
    <>
      <h1>Hello</h1>
      <p>This is a message</p>
    </>
  );
}

--------------------More example of Fragments--------

import React from 'react';
function Summary({ text }) {
  return (
     <React.Fragment>
      <h1>Summary</h1>
      <p>{text}</p>
     </React.Fragment>
);
}

function App() {
  return (
    <div id="app" data-testid="app">
      <Summary text="Fragments help you avoid unnecessary HTML elements." />
    </div>
  );
}
export default App;

--------------------------------------------------------------------------

📌 What is Forwarding Props or Proxy prop?

 - When you make a React component, sometimes it gets some information (called props) from its parent. 
   If your component just wraps another component inside it (eg in Section Component), you usually want to send those props down 
   to the inner component — that’s called forwarding props.
   
📝 {... is js features called Rest property this will grp all remaining obj properties into new obj
   (named in this case allOtherProps)}   and allow to forward them into (eg) section element using spread operator which 
    looks same spread that grouped data 

🔹Eg for section element we create a Section Component
export default function Section({ title, children, ...allOtherProps }) {    📝here (...allOtherProps) is group the data
  return (                        
    <section {...allOtherProps}>       📝here ...allOtherProps is spread that grouped data
      <h2>{title}</h2>
      {children}
    </section>
  );
}

📝And Used like this 
 <Section title="Examples" id='examples'>
          <menu>
            <TabButton isSelected={selectedTopic ==='components'} onClick={() => handleSelect('components')}>Components</TabButton>
            <TabButton isSelected={selectedTopic ==='jsx'} onClick={() => handleSelect('jsx')}>JSX</TabButton>
            <TabButton isSelected={selectedTopic ==='props'} onClick={() => handleSelect('props')}>Props</TabButton>
            <TabButton isSelected={selectedTopic ==='state'} onClick={() => handleSelect('state')}>State</TabButton>
          </menu>
          {tabContent}
 </Section>
    );
	
📝 Or Using Like this	
import Section from './Section.jsx';
export default function CoreConcepts() {
  return (
    <Section title ="Core Concepts" id="core-concepts">
      <ul>
        {CORE_CONCEPTS.map((conceptItem) => (
          <CoreConcept key={conceptItem.title} {...conceptItem} />
        ))}
      </ul>
    </Section>
  );
}

📝   ...allOtherProps
  This uses JavaScript’s rest syntax to gather all the other props you didn’t explicitly name.
  If you pass <Section id="examples" className="section-class">, those extra props (id and className) are collected in this object.
  When you write <section {...allOtherProps}>, you forward all those extra props to the <section> HTML element, so the browser understands them.

📝 title prop
  This is a named prop.
  When you write <Section title="Examples">, the value "Examples" gets passed as the title prop.
  You use title inside the component to show a heading, like <h2>{title}</h2>.

📝 children prop
  This is a special prop in React.
  It represents everything you put between the opening and closing tags of a component.
<Section title="Examples" id="examples">
  <menu>...</menu>
  {tabContent}
</Section>

The <menu> and {tabContent} are children.
They get injected inside the Section component where you write {children}.	

-------------------------------------------------------------------------------------

📌 What are Multiple JSX Slots in React?
  In React, multiple JSX slots refer to the ability to pass different sections of JSX content into a component through props, 
  allowing flexible and reusable layouts.
  React achieves this using: props.children → for the default slot
                             Named props (e.g., header, buttons, footer) → for custom/named slots

  <Tabs
        buttons={
          <>
            <TabButton
              isSelected={selectedTopic === 'components'}
              onClick={() => handleSelect('components')}
            >
              Components
            </TabButton>
            <TabButton
              isSelected={selectedTopic === 'jsx'}
              onClick={() => handleSelect('jsx')}
            >
              JSX
            </TabButton>
            .......
          </>
        }
      >
        {tabContent}
  </Tabs>
We are passing the buttons slot via the buttons prop.
We are passing the tab content as the default children.

	  
🔹 Inside the Tabs component:
  export default function Tabs({ children, buttons }) {
  return (
    <>
      <menu>{buttons}</menu>   ← renders the "buttons" slot
      {children}               ← renders the default "children" slot
    </>
  );
 }

💡 If You Wanted to Add a Third Slot (e.g., footer):
Update the component:

export default function Tabs({ children, buttons, footer }) {
  return (
    <>
      <menu>{buttons}</menu>
      <div>{children}</div>
      <footer>{footer}</footer>
    </>
  );
}

📝Use it like:

<Tabs
  buttons={...}
  footer={<p>End of tabs</p>}
>
  {tabContent}
</Tabs>

✅ How Many Slots Can You Have?
As many as you want!
For example:

<MyComponent 
  header={<Header />} 
  sidebar={<Sidebar />} 
  content={<Main />} 
  footer={<Footer />}
/>

Then inside:

const MyComponent = ({ header, sidebar, content, footer }) => (
  <div>
    <header>{header}</header>
    <aside>{sidebar}</aside>
    <main>{content}</main>
    <footer>{footer}</footer>
  </div>
);

-----------------------------------------------------------------------

📌 Settings component types dynamically in React
 for eg, button wrapper 
 <Tabs
     ✅ ButtonContainer = {Section}       // for custom components (as dynamic)
	 ✅ ButtonContainer = "menu"          // for build-in components    
        buttons={
          <>
            <TabButton
              isSelected={selectedTopic === 'components'}
              onClick={() => handleSelect('components')}
            >
              Components
            </TabButton>
            <TabButton
              isSelected={selectedTopic === 'jsx'}
              onClick={() => handleSelect('jsx')}
            >
              JSX
            </TabButton>
            .......
          </>
        }
      >
        {tabContent}
  </Tabs>
  
📝Use it like:
export default function Tabs({ children, buttons, ButtonsContainer }) {
 //const ButtonsContainer = buttonsContainer;
  return (
    <>
      <ButtonsContainer>{buttons}</ButtonsContainer>
      {children}
    </>
  );
}

  📌 (OR More convenient way) Setting Default Prop Values
  export default function Tabs({ children, buttons, ButtonsContainer = 'menu'  }) {
  
  return (
    <>
      <ButtonsContainer>{buttons}</ButtonsContainer>
      {children}
    </>
  );
}
----------------------------------------------------------------------------------------------
📌 Updating State Based on Previous State or Old State

1. setIsEditing(!isEditing): ❎
  if our new state depends on our previous state value, we shoud not update the state like this

2. setIsEditing(wasEditing => !wasEditing): ✅
  Instead pass a function to our state updating function, This function will automatically be 
  called by React and will receive the guaranteed latest state value

Why ? we r using {setIsEditing(wasEditing => !wasEditing):}  instead of  {setIsEditing(!isEditing):}
because setIsEditing(!isEditing): this state here will not perform instantly it will be schedule  by react to be performed in future
i.e it will be performed after 1 or 2 milliseconds 

Note :
"if(isEditing=== true)"   is same   "if(isEditing)"
"if(isEditing=== false)"  is same  "if(!isEditing)"   
"isEditing ? false : true is same  (!isEditing)"
------------------------------------------------------------------------------------------
📌Two way binding in React

In React, two-way data binding means that:
The UI reflects the state, and
The state updates when the UI changes.

In simpler terms:
👉 When the input field changes, the state is updated,
👉 And when the state changes, the input field updates.

import { useState } from 'react';

function TwoWayBindingExample() {
  const [name, setName] = useState('');

  return (
    <div>
      <input
        type="text"
        value={name}              // 👈 Bound to state
        onChange={(e) => setName(e.target.value)}  // 👈 Updates state on input change
      />
      <p>Hello, {name}!</p>       {/* 👈 State reflects in UI */}
    </div>
  );
}
 
 ----------------------------OR exer 16 Two way binding -----------------------
 
function App() {
    const [name, setName] = useState("");
    function handleNameChange(event){
        setName(event.target.value)      // 👈 Updates state on input change
    }
  return (
    <>
      <section id="feedback">
        <p>
          <label>Your Name</label>
          <input type="text" value={name}        // 👈 Bound to state
          onChange={handleNameChange} />
        </p>
      </section>
      <section id="draft">
        <Review student={name}/>         {/* 👈 State reflects in UI */}
                                           //as in Review Component we use student prop
        <p>
          <button>Save</button>
        </p>
      </section>
    </>
  );
}

export default App;

-------------------------------------🧱 1. The Game Board Structure----------------------------
📌export default function GameBoard() {
  return (
    <ol id="game-board">
      {initialGameBoard.map((row, rowIndex) => (
        <li key={rowIndex}>
          <ol>
            {row.map((playerSymbol, colIndex) => (
              <li key={colIndex}>
                <button>{playerSymbol}</button>
              </li>
            ))}
          </ol>
        </li>
      ))}
    </ol>
  );
}
🧠 Breakdown:
- The component renders the 3x3 grid using nested <ol> (ordered lists).
- It loops through each row using map((row, rowIndex) => ...).
- For each row, it creates another nested <ol> which contains:
- A list of <li> items, each representing a cell in the row.
- Inside each cell, a <button> displays the current value (null, "X", or "O").

-------------------------------------------🧱Immutable Update Game Board ----------------------------
📌Immutable Update
To update a specific cell (e.g. row 1, col 2) in a React state object (2D array) without mutating the original state.

So, instead of doing this ❌:
prevGameBoard[rowIndex][colIndex] = 'X'; // ❌ MUTATES the original array

We do this ✅:
✅Immutable Update (Line-by-line):
setGameBoard((prevGameBoard) => {
  const updatedBoard = [...prevGameBoard.map(innerArray => [...innerArray])];
  updatedBoard[rowIndex][colIndex] = 'X';
  return updatedBoard;
});

What it does:
1.prevGameBoard.map(innerArray => [...innerArray])
  → Creates a deep copy of the 2D array.
  → Each row is copied ([...innerArray]) so you don't accidentally mutate it.

2.updatedBoard[rowIndex][colIndex] = 'X'
  → Set the chosen square to 'X'.

3.return updatedBoard
  → Set the new board as state using setGameBoard.

🖼 Output:
Each button in the 3x3 grid will show 'X' when clicked, and React will re-render correctly.

-------------------------------------------------------------------------------------------------

📌Lifting State Up :
   To the closest ancestor component(like App.js) that has access to all component that need to work with
   that state
 - Ancestor Component(like app component)- manages state value that's needed by both Child1 and Child2
   because App Component can then pass the info to both Player.js and GameBoard.jsx Component via props
 - Ancestor passes a function that eventually changes the state via props to the child component
 - This allow the child component to initiate a state change.
 
 🤔 Why do we do it?
- Sometimes, two or more child components need to:
- Access the same state
- Or communicate with each other via shared data

But…
🔹 Each child has its own isolated state → ❌ Not good for syncing
🔹 So, we "lift" that state up to their common parent → ✅ Shared state!

🧠 How It All Connects
- App.jsx controls whose turn it is.
- GameBoard uses activePlayerSymbol to place 'X' or 'O' on the board.
 When a cell is clicked:
- GameBoard updates the board with current player’s symbol.
- Calls onSelectSquare, which toggles the player in App.
- Player displays names and symbols, highlights active player, and allows name editing.

-----------------------------------------------------------------------------------------------------

📌Avoid Interesting States
📌90 completed

📌Refs and Portals completed 

target() -> 5 section atleast till 14